<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Niraj Pandkar</title>
    <link>https://nirajpandkar.github.io/tags/leetcode/</link>
    <description>Recent content in leetcode on Niraj Pandkar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 18 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://nirajpandkar.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Top K Frequent Elements</title>
      <link>https://nirajpandkar.github.io/2023/05/top-k-frequent-elements/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://nirajpandkar.github.io/2023/05/top-k-frequent-elements/</guid>
      <description>Link https://leetcode.com/problems/top-k-frequent-elements/description/
Solution  The first step is to build a hash map element -&amp;gt; its frequency. This step takes O(N) time where N is a number of elements in the list. The second step is to build a heap of size k using N elements*.  To add the first k elements takes a linear time O(k) in the average case, and O(log1+log2+...+logk)=O(logk!)=O(klogk) in the worst case. After the first k elements we start to push and pop at each step, N - k steps in total.</description>
    </item>
    
  </channel>
</rss>
